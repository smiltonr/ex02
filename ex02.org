#+TITLE: Exercise 2: Expressions, Variables, Assignment
#+AUTHOR: S Milton Rajendram

#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
#+LaTeX_HEADER: \usepackage{setspace}
#+begin_latex
%\linespread{1.2}
#+end_latex

| Assignment | 1 |
| Reg No     |   |
| Name       |   |
| Grade      |   |
| Date       |   | 

\onehalfspacing
* Objective
   1. Translate expressions to C.
   2. Declare variables of data types appropriate for the calculation.
   3. Order the update of variables using a sequence of assignments.
   4. Use alternative and conditional statements.
   5. Specify, define, and call simple functions.

* Home work
  1. Write a program to calculate the area and the perimeter of a
     circle. Read the radius from the user and print the outputs on the
     display.
     #+NAME: build_input
     #+BEGIN_SRC sh :result none :exports none
     echo 20 >input.txt
     #+END_SRC
     #+BEGIN_SRC C :var tmp=build_input :cmdline <input.txt :exports none
       /*
         Purpose: find the area and perimeter of a circle
         Input: radius, a, positive number.
         Output: area and perimeter of the circle of radius
       */

       #include <stdio.h>

       int main ()
       {
         const double pi = 22.0/7;  
         double radius;

         scanf ("%lf", &radius);
         double area = pi * radius * radius;
         double perimeter = 2 * pi * radius;
         printf ("radius = %4.2f,area = %4.2f,perimeter = %4.2f\n", radius, area, perimeter);
       }
     #+END_SRC

     #+RESULTS:
     | radius = 20.00 | area = 1257.14 | perimeter = 125.71 |
  2. Write functions to calculate
     1. the area of a circle
     2. the perimeter of a circle
     Write a program to read the radius from stdin, calculate the area
     and the perimeter of the circle, and print them on the stdout. In
     how many places do you have to make changes to increase the
     precision of $\pi$.
     #+BEGIN_SRC C :exports none
     /*
     Purpose: find the area and perimeter of a circle
     Input: radius, a positive number.
     Output: area and perimeter of the circle of radius
     ,*/
     #include <stdio.h>

     const double pi = 22.0/7;  
     double area (const double r);
     double perimeter (const double r);

     int main ()
     {
     double radius;

     //scanf ("%f", &radius);
     radius = 5;
     printf ("radius = %.2f, area = %.2f, perimeter = %.2f\n", radius, area(radius), perimeter(radius));
     }

     double area (const double r)
     {
     return pi * r * r;
     }

     double perimeter (const double r)
     {
     return 2 * pi * r;
     }
     #+END_SRC

     #+RESULTS:
     | radius = 5.00 | area = 78.57 | perimeter = 31.43 |

  3. Write a Boolean function =is_leap()= for testing whether a year
     is leap year or not. Test the function from =main()=.
     #+BEGIN_SRC C :exports none
       bool is_leap (year) {
         return ((year % 4 == 0) && (year % 100 !=)) || (year % 400 == 0);
       }
     #+END_SRC
  4. Read the coefficients =a=, =b=, and =c= of a quadratic
     equation. Calculate the discriminant.  Define a function =sign()=
     that returns -1 or 0 or 1 for a negative number, zero or a
     positive number, respectively. Use it to test the
     discriminant. If the discriminant is non-negative, find the roots
     of the equation, and print them. Avoid duplicate calculations
     whereever possible.
     #+BEGIN_SRC C :exports none
       #include <stdio.h>
       #include <math.h>

       short sign (double f);

       int main ()
       {
         int a, b, c;

         scanf ("%d%d%d", &a, &b, &c);
         double disc = b*b - 4*a*c;
         int s = sign(disc);
         if (s == 0) {
           double x = -b / 2*a;
           printf ("Equal roots: x = %f\n", x);
         }
         else if (s == 1) {
           double disc_sqrt = sqrt (disc);
           double x1 = (-b + disc_sqrt) / 2*a;
           double x2 = (-b - disc_sqrt) / 2*a;
           printf ("Roots: x1 = %f, x2 = %f\n", x1, x2);    
         }
         else
           printf ("Complex roots.\n");
       }

       short sign (double f)
       {
         if (f < 0)
           return -1;
         else if (f == 0)
           return 0;
         else
           return 1;
       }
     #+END_SRC

  5. Write a program to compute the distance between two points. To
     read a point, the program should read 2 numbers from the user for
     the =x= and =y= coordinates.  Hence your program should read 4
     numbers for the two points. Print the output on the
     stdout. Implement a function =distance(x1, y1, x2, y2)= that
     takes two points =(x1, y1)= and =(x2, y2)= as 4 parameters and
     returns the distance between the two points. Avoid duplicate
     calculations whereever possible.

     #+BEGIN_SRC C :exports none
       #include <stdio.h>
       #include <math.h>

       double dist (int x1, int y1, int x2, int y2);
       double square (double x);

       int main ()
       {
         int x1, y1, x2, y2;

         scanf ("%d%d%d%d", &x1, &y1, &x2, &y2);
         printf ("dist ((%d,%d), (%d,%d)) = %f\n",
                  x1, y1, x2, y2, dist (x1, y1, x2, y2));
       }

       double dist (int x1, int y1, int x2, int y2)
       {
         return  sqrt(square(x1 - y1) + square(x2 - y2));
       }

       double square (double x)
       {
         return x*x;
       }
     #+END_SRC
  6. Initialize two variables with values read from the user and
     exchange (swap) their contents. Print them before and after the
     swap.
     #+BEGIN_SRC C :exports none
       #include <stdin.h>

       int main ()
       {
         int a;
         int b;

         scanf ("%d%d", &a, &b);
         printf ("a = %d, b = %d\n", a, b);
         int t = a;
         a = b;
         b = t;
         printf ("a = %d, b = %d\n", a, b);  
         return 0;
       }
     #+END_SRC
     1. Define a function =swap()= to exchange the contents of the two
        variables, and check whether the function works as
        intended. If it does not work, what is the reason?
  7. *Problem*: Read four numbers =a, b, c, d= from stdin. Circulate
     them so that a gets the value of b, and so on: =a <- b <- c <- d
     <- a=
     
     *Algorithm develpment*

     *Code*
     #+BEGIN_SRC C :exports none
       #include <stdin.h>

       int main ()
       {
         int a, b, c, d;
         
         scanf ("%d%d%d%d", &a, &b, &c, &d);
         printf ("a = %d, b = %d, c = %d, d = %d\n", a, b, c, d);
         int t = a;
         a = b;
         b = c;
         c = d;
         d = t;
         printf ("a = %d, b = %d, c = %d, d = %d\n", a, b, c, d);
         return 0;
       }     
     #+END_SRC

     #*Notes*:
  8. Read three numbers =a, b, c= from stdin. Write a program to
     rearrange them so that =a $\le$ b $\le$ c=.
     #+BEGIN_SRC C :exports none
       #include <stdin.h>

       int main ()
       {
         int a, b, c;
         int t;
         
         scanf ("%d%d%d", &a, &b, &c);
         printf ("a = %d, b = %d, c = %d\n", a, b, c);
         if (a > b) {
           t = a;
           a = b;
           b = t;
         }
         if (a > c) {
           t = a;
           a = c;
           c = t;
         }
         if (b > c) {
           t = b;
           b = c;
           c = t;
         }      
         printf ("a = %d, b = %d, c = %d\n", a, b, c);  
         return 0;
       }     
     #+END_SRC
  9. Fill an array of 3 numbers with numbers read from stdin. Write a
     program to rearrange them so that =a[0] $\le$ a[1] $\le$ a[2]=
    #+BEGIN_SRC C :exports none
      #include <stdin.h>

      int main ()
      {
        int a[3]
        int t;
         
        scanf ("%d%d%d", &a[0], &a[1], &a[2]);
        printf ("a[0] = %d, a[1] = %d, a[2] = %d\n", a[0], a[1], a[2]);
        if (a[0] > a[1]) {
          t = a[0];
          a[0] = a[1];
          a[1] = t;
        }
        if (a[0] > a[2]) {
          t = a[0];
          a[0] = a[2];
          a[2] = t;
        }
        if (a[1] > a[2]) {
          t = a[1];
          a[1] = a[2];
          a[2] = t;
        }
        printf ("a[0] = %d, a[1] = %d, a[2] = %d\n", a[0], a[1], a[2]);  
        return 0;
      }     
    #+END_SRC
     
* COMMENT Extra programs 
  10. Fill an array of size 3 with numbers read from stdin. Write a
      program to find the position (index), say =mpos=, of the smallest
      number in the array. Define a function =a[0] $\le$ a[1] $\le$
      a[2]=.
 
      #+BEGIN_SRC C :var c=5 :var d=10
      printf ("%d,%d\n", c, d);
      int t = c;
      c = d;
      d = t;
      printf ("%d,%d\n", c, d);
      #+END_SRC

      #+RESULTS:
      |  5 | 10 |
      | 10 |  5 |

